/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedUsersImport } from './routes/_authenticated/users'
import { Route as AuthenticatedTemplatesImport } from './routes/_authenticated/templates'
import { Route as AuthenticatedProfileImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedOjtImport } from './routes/_authenticated/ojt'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedCompanyImport } from './routes/_authenticated/company'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUsersRoute = AuthenticatedUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedTemplatesRoute = AuthenticatedTemplatesImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedOjtRoute = AuthenticatedOjtImport.update({
  id: '/ojt',
  path: '/ojt',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedCompanyRoute = AuthenticatedCompanyImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/company': {
      id: '/_authenticated/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof AuthenticatedCompanyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/ojt': {
      id: '/_authenticated/ojt'
      path: '/ojt'
      fullPath: '/ojt'
      preLoaderRoute: typeof AuthenticatedOjtImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/templates': {
      id: '/_authenticated/templates'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof AuthenticatedTemplatesImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedCompanyRoute: typeof AuthenticatedCompanyRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedOjtRoute: typeof AuthenticatedOjtRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedTemplatesRoute: typeof AuthenticatedTemplatesRoute
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCompanyRoute: AuthenticatedCompanyRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedOjtRoute: AuthenticatedOjtRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedTemplatesRoute: AuthenticatedTemplatesRoute,
  AuthenticatedUsersRoute: AuthenticatedUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/register': typeof RegisterRoute
  '/company': typeof AuthenticatedCompanyRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/ojt': typeof AuthenticatedOjtRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/templates': typeof AuthenticatedTemplatesRoute
  '/users': typeof AuthenticatedUsersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/register': typeof RegisterRoute
  '/company': typeof AuthenticatedCompanyRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/ojt': typeof AuthenticatedOjtRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/templates': typeof AuthenticatedTemplatesRoute
  '/users': typeof AuthenticatedUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/register': typeof RegisterRoute
  '/_authenticated/company': typeof AuthenticatedCompanyRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/ojt': typeof AuthenticatedOjtRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/templates': typeof AuthenticatedTemplatesRoute
  '/_authenticated/users': typeof AuthenticatedUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/register'
    | '/company'
    | '/dashboard'
    | '/ojt'
    | '/profile'
    | '/templates'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/register'
    | '/company'
    | '/dashboard'
    | '/ojt'
    | '/profile'
    | '/templates'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/register'
    | '/_authenticated/company'
    | '/_authenticated/dashboard'
    | '/_authenticated/ojt'
    | '/_authenticated/profile'
    | '/_authenticated/templates'
    | '/_authenticated/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/company",
        "/_authenticated/dashboard",
        "/_authenticated/ojt",
        "/_authenticated/profile",
        "/_authenticated/templates",
        "/_authenticated/users"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authenticated/company": {
      "filePath": "_authenticated/company.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/ojt": {
      "filePath": "_authenticated/ojt.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile": {
      "filePath": "_authenticated/profile.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/templates": {
      "filePath": "_authenticated/templates.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users": {
      "filePath": "_authenticated/users.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
