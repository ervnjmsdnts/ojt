/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as authenticatedLayoutImport } from './routes/(authenticated)/_layout'
import { Route as authenticatedLayoutSIndexImport } from './routes/(authenticated)/_layout/s/index'
import { Route as authenticatedLayoutCIndexImport } from './routes/(authenticated)/_layout/c/index'
import { Route as authenticatedLayoutAIndexImport } from './routes/(authenticated)/_layout/a/index'
import { Route as authenticatedLayoutSFormsImport } from './routes/(authenticated)/_layout/s/forms'
import { Route as authenticatedLayoutSDocumentationImport } from './routes/(authenticated)/_layout/s/documentation'
import { Route as authenticatedLayoutSAttendanceImport } from './routes/(authenticated)/_layout/s/attendance'

// Create Virtual Routes

const authenticatedImport = createFileRoute('/(authenticated)')()

// Create/Update Routes

const authenticatedRoute = authenticatedImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedLayoutRoute = authenticatedLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authenticatedRoute,
} as any)

const authenticatedLayoutSIndexRoute = authenticatedLayoutSIndexImport.update({
  id: '/s/',
  path: '/s/',
  getParentRoute: () => authenticatedLayoutRoute,
} as any)

const authenticatedLayoutCIndexRoute = authenticatedLayoutCIndexImport.update({
  id: '/c/',
  path: '/c/',
  getParentRoute: () => authenticatedLayoutRoute,
} as any)

const authenticatedLayoutAIndexRoute = authenticatedLayoutAIndexImport.update({
  id: '/a/',
  path: '/a/',
  getParentRoute: () => authenticatedLayoutRoute,
} as any)

const authenticatedLayoutSFormsRoute = authenticatedLayoutSFormsImport.update({
  id: '/s/forms',
  path: '/s/forms',
  getParentRoute: () => authenticatedLayoutRoute,
} as any)

const authenticatedLayoutSDocumentationRoute =
  authenticatedLayoutSDocumentationImport.update({
    id: '/s/documentation',
    path: '/s/documentation',
    getParentRoute: () => authenticatedLayoutRoute,
  } as any)

const authenticatedLayoutSAttendanceRoute =
  authenticatedLayoutSAttendanceImport.update({
    id: '/s/attendance',
    path: '/s/attendance',
    getParentRoute: () => authenticatedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/_layout': {
      id: '/(authenticated)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedLayoutImport
      parentRoute: typeof authenticatedRoute
    }
    '/(authenticated)/_layout/s/attendance': {
      id: '/(authenticated)/_layout/s/attendance'
      path: '/s/attendance'
      fullPath: '/s/attendance'
      preLoaderRoute: typeof authenticatedLayoutSAttendanceImport
      parentRoute: typeof authenticatedLayoutImport
    }
    '/(authenticated)/_layout/s/documentation': {
      id: '/(authenticated)/_layout/s/documentation'
      path: '/s/documentation'
      fullPath: '/s/documentation'
      preLoaderRoute: typeof authenticatedLayoutSDocumentationImport
      parentRoute: typeof authenticatedLayoutImport
    }
    '/(authenticated)/_layout/s/forms': {
      id: '/(authenticated)/_layout/s/forms'
      path: '/s/forms'
      fullPath: '/s/forms'
      preLoaderRoute: typeof authenticatedLayoutSFormsImport
      parentRoute: typeof authenticatedLayoutImport
    }
    '/(authenticated)/_layout/a/': {
      id: '/(authenticated)/_layout/a/'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof authenticatedLayoutAIndexImport
      parentRoute: typeof authenticatedLayoutImport
    }
    '/(authenticated)/_layout/c/': {
      id: '/(authenticated)/_layout/c/'
      path: '/c'
      fullPath: '/c'
      preLoaderRoute: typeof authenticatedLayoutCIndexImport
      parentRoute: typeof authenticatedLayoutImport
    }
    '/(authenticated)/_layout/s/': {
      id: '/(authenticated)/_layout/s/'
      path: '/s'
      fullPath: '/s'
      preLoaderRoute: typeof authenticatedLayoutSIndexImport
      parentRoute: typeof authenticatedLayoutImport
    }
  }
}

// Create and export the route tree

interface authenticatedLayoutRouteChildren {
  authenticatedLayoutSAttendanceRoute: typeof authenticatedLayoutSAttendanceRoute
  authenticatedLayoutSDocumentationRoute: typeof authenticatedLayoutSDocumentationRoute
  authenticatedLayoutSFormsRoute: typeof authenticatedLayoutSFormsRoute
  authenticatedLayoutAIndexRoute: typeof authenticatedLayoutAIndexRoute
  authenticatedLayoutCIndexRoute: typeof authenticatedLayoutCIndexRoute
  authenticatedLayoutSIndexRoute: typeof authenticatedLayoutSIndexRoute
}

const authenticatedLayoutRouteChildren: authenticatedLayoutRouteChildren = {
  authenticatedLayoutSAttendanceRoute: authenticatedLayoutSAttendanceRoute,
  authenticatedLayoutSDocumentationRoute:
    authenticatedLayoutSDocumentationRoute,
  authenticatedLayoutSFormsRoute: authenticatedLayoutSFormsRoute,
  authenticatedLayoutAIndexRoute: authenticatedLayoutAIndexRoute,
  authenticatedLayoutCIndexRoute: authenticatedLayoutCIndexRoute,
  authenticatedLayoutSIndexRoute: authenticatedLayoutSIndexRoute,
}

const authenticatedLayoutRouteWithChildren =
  authenticatedLayoutRoute._addFileChildren(authenticatedLayoutRouteChildren)

interface authenticatedRouteChildren {
  authenticatedLayoutRoute: typeof authenticatedLayoutRouteWithChildren
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
  authenticatedLayoutRoute: authenticatedLayoutRouteWithChildren,
}

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
  authenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/s/attendance': typeof authenticatedLayoutSAttendanceRoute
  '/s/documentation': typeof authenticatedLayoutSDocumentationRoute
  '/s/forms': typeof authenticatedLayoutSFormsRoute
  '/a': typeof authenticatedLayoutAIndexRoute
  '/c': typeof authenticatedLayoutCIndexRoute
  '/s': typeof authenticatedLayoutSIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authenticatedLayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/s/attendance': typeof authenticatedLayoutSAttendanceRoute
  '/s/documentation': typeof authenticatedLayoutSDocumentationRoute
  '/s/forms': typeof authenticatedLayoutSFormsRoute
  '/a': typeof authenticatedLayoutAIndexRoute
  '/c': typeof authenticatedLayoutCIndexRoute
  '/s': typeof authenticatedLayoutSIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/(authenticated)': typeof authenticatedRouteWithChildren
  '/(authenticated)/_layout': typeof authenticatedLayoutRouteWithChildren
  '/(authenticated)/_layout/s/attendance': typeof authenticatedLayoutSAttendanceRoute
  '/(authenticated)/_layout/s/documentation': typeof authenticatedLayoutSDocumentationRoute
  '/(authenticated)/_layout/s/forms': typeof authenticatedLayoutSFormsRoute
  '/(authenticated)/_layout/a/': typeof authenticatedLayoutAIndexRoute
  '/(authenticated)/_layout/c/': typeof authenticatedLayoutCIndexRoute
  '/(authenticated)/_layout/s/': typeof authenticatedLayoutSIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/s/attendance'
    | '/s/documentation'
    | '/s/forms'
    | '/a'
    | '/c'
    | '/s'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/s/attendance'
    | '/s/documentation'
    | '/s/forms'
    | '/a'
    | '/c'
    | '/s'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/(authenticated)'
    | '/(authenticated)/_layout'
    | '/(authenticated)/_layout/s/attendance'
    | '/(authenticated)/_layout/s/documentation'
    | '/(authenticated)/_layout/s/forms'
    | '/(authenticated)/_layout/a/'
    | '/(authenticated)/_layout/c/'
    | '/(authenticated)/_layout/s/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  authenticatedRoute: typeof authenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  authenticatedRoute: authenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/(authenticated)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/(authenticated)": {
      "filePath": "(authenticated)",
      "children": [
        "/(authenticated)/_layout"
      ]
    },
    "/(authenticated)/_layout": {
      "filePath": "(authenticated)/_layout.tsx",
      "parent": "/(authenticated)",
      "children": [
        "/(authenticated)/_layout/s/attendance",
        "/(authenticated)/_layout/s/documentation",
        "/(authenticated)/_layout/s/forms",
        "/(authenticated)/_layout/a/",
        "/(authenticated)/_layout/c/",
        "/(authenticated)/_layout/s/"
      ]
    },
    "/(authenticated)/_layout/s/attendance": {
      "filePath": "(authenticated)/_layout/s/attendance.tsx",
      "parent": "/(authenticated)/_layout"
    },
    "/(authenticated)/_layout/s/documentation": {
      "filePath": "(authenticated)/_layout/s/documentation.tsx",
      "parent": "/(authenticated)/_layout"
    },
    "/(authenticated)/_layout/s/forms": {
      "filePath": "(authenticated)/_layout/s/forms.tsx",
      "parent": "/(authenticated)/_layout"
    },
    "/(authenticated)/_layout/a/": {
      "filePath": "(authenticated)/_layout/a/index.tsx",
      "parent": "/(authenticated)/_layout"
    },
    "/(authenticated)/_layout/c/": {
      "filePath": "(authenticated)/_layout/c/index.tsx",
      "parent": "/(authenticated)/_layout"
    },
    "/(authenticated)/_layout/s/": {
      "filePath": "(authenticated)/_layout/s/index.tsx",
      "parent": "/(authenticated)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
